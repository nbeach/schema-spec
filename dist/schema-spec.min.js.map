{"version":3,"sources":["schema-spec.min.js"],"names":["global","factory","define","amd","module","exports","SchemaSpec","this","evaluateConditions","conditions","value","array","i","length","_propertyConditions","_universalConditions","prototype","_addConditions","validationList","list","concat","push","_validateValue","propertyConditions","property","hasOwnProperty","all","name","undefined","validate","object","Error","Object","keys","propertyName","strings","string","numbers","number","booleans","functions","objects","arrays","toString","call","integers","integer","empty","notConditions","not","equal","to","provided","min","minLength","max","maxLength","greater","than","minValue","less","maxValue","schema","spec","arrayOf","x","either","conditionsA","or","conditionsB"],"mappings":"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","file":"schema-spec.min.js","sourcesContent":["(function (global, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine([], factory);\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory();\n\t} else {\n\t\tglobal.SchemaSpec = factory();\n\t}\n}(this, function SchemaSpecFactory() {\n//TODO: cleanup documentation\n\n\t/**\n\t * Creates a new schema specification object.\n\t * @Class SchemaSpec\n\t */\n\tvar SchemaSpec = function() {\n\t\tthis._propertyConditions = {};\n\t\tthis._universalConditions = [];\n\t};\n\n\tSchemaSpec.prototype._addConditions = function(validationList, conditions) {\n\t\tvar list = [].concat(validationList);\n\t\tif(SchemaSpec.conditions.array(conditions)) {\n\t\t\tlist = list.concat(conditions);\n\t\t} else {\n\t\t\tlist.push(conditions);\n\t\t}\n\t\treturn list;\n\t};\n\n\tSchemaSpec.prototype._validateValue = function(propertyConditions, value) {\n\t\tfor(var property in propertyConditions) {\n\t\t\tif (propertyConditions.hasOwnProperty(property) && propertyConditions[property](value) === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t};\n\n\t/**\n\t * Sets conditions to be applied to all specified properties in the object.\n\t * @memberof SchemaSpec\n\t * @param {function|Array<function>} conditions - A single or array of conditions to apply\n\t * @returns {SchemaSpec} Returns a reference to the SchemaSpec object to support builder style calls\n\t */\n\tSchemaSpec.prototype.all = function(conditions) {\n\t\tthis._universalConditions = this._addConditions(this._universalConditions, conditions);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Sets conditions to be applied to a property.\n\t * @memberof SchemaSpec\n\t * @param {string} name - The name of the property\n\t * @param {function|Array<function>} [conditions] - A single or array of conditions to apply\n\t * @returns {SchemaSpec} Returns a reference to the SchemaSpec object to support builder style calls\n\t */\n\tSchemaSpec.prototype.property = function(name, conditions) {\n\t\tif(SchemaSpec.conditions.undefined(this._propertyConditions[name])) {\n\t\t\tthis._propertyConditions[name] = [];\n\t\t}\n\n\t\tif(!SchemaSpec.conditions.undefined(conditions) && !SchemaSpec.conditions.null(conditions)) {\n\t\t\tthis._propertyConditions[name] = this._addConditions(this._propertyConditions[name], conditions);\n\t\t}\n\n\t\treturn this;\n\t};\n\n\n\t/**\n\t * Validates an object against the schema spec.\n\t * @memberof SchemaSpec\n\t * @param {object} object - The object to be validated\n\t * @returns {SchemaSpec} Returns true if the object passes all validations, false if at least one validation fails.\n\t */\n\tSchemaSpec.prototype.validate = function(object) {\n\n\t\tif(!SchemaSpec.conditions.object(object)) {\n\t\t\tthrow new Error('Value to validate is not an object');\n\t\t}\n\n\t\tif(Object.keys(this._propertyConditions).length === 0) {\n\t\t\tthrow new Error('No object properties specified');\n\t\t}\n\n\t\tfor (var propertyName in this._propertyConditions) {\n\n\t\t\tfor(var i = 0; i  < this._universalConditions.length; i++) {\n\t\t\t\tif(this._universalConditions[i](object[propertyName]) === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(this._validateValue(this._propertyConditions[propertyName], object[propertyName]) === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t};\n\n\n\n\n\t/**\n\t * Contains condition functions to be used for validation\n\t * @memberof SchemaSpec\n\t * @static\n\t * @type {object}\n\t * @property {function} null - Asserts the value is null\n\t * @property {function} undefined - Asserts the value is undefined\n\t * @property {function} string - Asserts the value is a string\n\t * @property {function} number - Asserts the value is a number\n\t * @property {function} boolean - Asserts the value is a boolean\n\t * @property {function} function - Asserts the value is a function\n\t * @property {function} object - Asserts the value is an object\n\t * @property {function} array - Asserts the value is an array\n\t * @property {function} integer - Asserts the value is an integer\n\t * @property {function} empty - Asserts the value is empty\n\t * @property {function} equal.to(value) - Asserts the value is equal to the provided value\n\t * @property {function} length(length) - Asserts the value length is equal to the provided length\n\t * @property {function} min.length(length) - Asserts the value is greater then or equal to the provided length\n\t * @property {function} max.length(length) - Asserts the value is less than or equal to the provided length\n\t * @property {function} greater.than(value) - Asserts the value is greater than the provided value\n\t * @property {function} less.than(value) - Asserts the value is less that the provided value\n\t * @property {function} arrayOf(conditions) - Asserts value is an array and all values match the provided condition(s)\n\t * @property {function} schema(SchemaSpec) - Asserts the value is an object and passes validation with the provided SchemaSpec\n\t * @property {function} either(conditionA).or(conditionB) - Asserts either conditionA passes, or conditionB passes\n\t * @property {function} not.null - Asserts the value is not null\n\t * @property {function} not.undefined - Asserts the value is not undefined\n\t * @property {function} not.string - Asserts the value is not a string\n\t * @property {function} not.number - Asserts the value is not a number\n\t * @property {function} not.boolean - Asserts the value is not a boolean\n\t * @property {function} not.function - Asserts the value is not a function\n\t * @property {function} not.object - Asserts the value is not an object\n\t * @property {function} not.array - Asserts the value is not an array\n\t * @property {function} not.integer - Asserts the value is not an integer\n\t * @property {function} not.empty - Asserts the value is not empty\n\t * @property {function} not.equal.to(value) - Asserts the value is not equal to the provided value\n\t * @property {function} not.length(length) - Asserts the value length is not the provided length\n\t */\n\tSchemaSpec.conditions = {};\n\tSchemaSpec.conditions.null = function(value) { return value === null; };\n\tSchemaSpec.conditions.undefined = function(value) { return typeof value === \"undefined\"; };\n\tSchemaSpec.conditions.strings = SchemaSpec.conditions.string = function(value) { return typeof value === \"string\"; };\n\tSchemaSpec.conditions.numbers = SchemaSpec.conditions.number = function(value) { return typeof value === \"number\"; };\n\tSchemaSpec.conditions.booleans = SchemaSpec.conditions.boolean = function(value) { return typeof value === \"boolean\"; };\n\tSchemaSpec.conditions.functions = SchemaSpec.conditions.function = function(value) { return typeof value === \"function\"; };\n\tSchemaSpec.conditions.objects = SchemaSpec.conditions.object = function(value) { return typeof value === \"object\"; };\n\tSchemaSpec.conditions.arrays = SchemaSpec.conditions.array = function(value) { return Object.prototype.toString.call(value) === '[object Array]'; };\n\tSchemaSpec.conditions.integers = SchemaSpec.conditions.integer = function(number) { return SchemaSpec.conditions.number(number) && (number % 1) === 0; };\n\tSchemaSpec.conditions.empty = function(value) { return SchemaSpec.conditions.string(value) && value.length === 0; };\n\n\t//Generate not validators for function that don't utilize currying\n\tvar notConditions = {};\n\tfor (var property in SchemaSpec.conditions) {\n\t\tif (SchemaSpec.conditions.hasOwnProperty(property) && property !== 'not') {\n\t\t\t(function(property) {\n\t\t\t\tnotConditions[property] = function(value) { return !SchemaSpec.conditions[property](value); };\n\t\t\t})(property);\n\t\t}\n\t}\n\tSchemaSpec.conditions.not = notConditions;\n\n\n\t//Currying validators\n\tSchemaSpec.conditions.length = function(length) { return function(value) { return SchemaSpec.conditions.not.undefined(value.length) && value.length === length }; };\n\tSchemaSpec.conditions.not.length = function(length) { return function(value) { return SchemaSpec.conditions.not.undefined(value.length) && value.length !== length }; };\n\tSchemaSpec.conditions.equal = { to: function(provided) { return function(value) { return value === provided }; } };\n\tSchemaSpec.conditions.not.equal = { to: function(provided) { return function(value) { return value !== provided }; } };\n\tSchemaSpec.conditions.min = { length: function(minLength) { return function(value) { return SchemaSpec.conditions.not.undefined(value.length) && value.length >= minLength }; } };\n\tSchemaSpec.conditions.max = { length: function(maxLength) { return function(value) { return SchemaSpec.conditions.not.undefined(value.length) && value.length <= maxLength }; } };\n\tSchemaSpec.conditions.greater = { than: function(minValue) { return function(value) { return value > minValue }; } };\n\tSchemaSpec.conditions.less = { than: function(maxValue) { return function(value) { return value < maxValue }; } };\n\tSchemaSpec.conditions.schema = function(spec) { return function(value) { return SchemaSpec.conditions.object(value) && spec.validate(value); } };\n\n\tSchemaSpec.conditions.arrayOf = function(conditions) {\n\t\treturn function(array) {\n\t\t\tif(!SchemaSpec.conditions.array(array)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif(!SchemaSpec.conditions.array(conditions)) {\n\t\t\t\tconditions = [conditions];\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < array.length; i++) {\n\t\t\t\tfor(var x = 0; x < conditions.length; x++)\n\t\t\t\tif(!conditions[x](array[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\t};\n\n\tfunction evaluateConditions(conditions, value) {\n\t\tif(!SchemaSpec.conditions.array(conditions)) {\n\t\t\tconditions = [conditions];\n\t\t}\n\n\t\tfor(var i = 0; i < conditions.length; i++) {\n\t\t\tif(conditions[i](value) === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tSchemaSpec.conditions.either = function(conditionsA) {\n\t\treturn {\n\t\t\tor: function(conditionsB) {\n\t\t\t\treturn function(value) {\n\t\t\t\t\treturn evaluateConditions(conditionsA, value) || evaluateConditions(conditionsB, value);\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t};\n\n\treturn SchemaSpec;\n}));\n"],"sourceRoot":"/source/"}